<%- include('../partials/header',{user}) %>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@tarekraafat/autocomplete.js@6.0.0/dist/css/autoComplete.min.css">
<script src="https://cdn.jsdelivr.net/npm/@tarekraafat/autocomplete.js@6.0.0/dist/js/autoComplete.min.js"></script>

<div class="jumbotron" style="min-height:600px; margin-bottom:0;">
<main>
    <form action="/products" method="POST">
    <div style="width:100%">
        <input name="name" id="autoComplete" type="text" tabindex="1" style="margin: 0 auto; display:block" autocomplete="off"/>
    </div>
    <div class="form-row align-items-center" style="justify-content: center; margin: 20px 0 0 ">
        <div class="col-sm-3 my-1">
        <select class="custom-select" name="category">
            <option selected>Category</option>
            <%categories.forEach(function(cat){%>
                <option value=<%=cat%>><%=cat%></option>
            <%})%>
        </select>
        </div>
        <div class="col-sm-3 my-1">
        <input name="keywords" type="text" class="form-control" id="inlineFormInputName" placeholder="Keywords(seperated by comma)" >
        </div>
        <div class="col-auto my-1">
        <div style="display:none">
            <%if(storeId){%>
            <input name="storeId" value="<%=storeId%>" >
            <%}else{%>
            <input name="storeId" value="">
            <%};%>
        </div>
        <button type="submit" class="btn btn-success">Find</button>
        </div>

    </div>
    </form>

    
<div class="card-columns" style="padding:30px">
    <%products.forEach(function (product){%>
        <div class="card" style="width: 300px;">
            <img src= "<%=product.imageUrl%>" class="card-img-top" alt="...">
            <div class="card-body">
                <div style="display:flex; justify-content: space-between"> 
                    <h5 class="card-title"><%= product.name%></h5>
                    <h6 class="card-title" style="color: grey"><%= product.price%>$</h6>
                </div>
                <div style=" margin-bottom:15px;
                            overflow: hidden;
                            text-overflow: ellipsis;
                            display: -webkit-box;
                            max-height: 80px;      /* fallback */
                            -webkit-line-clamp: 3; /* number of lines to show */
                            -webkit-box-orient: vertical; " ><p class="card-text" style=""><%=product.description%></p></div>
                <a href="/products/<%=product.id%>" class="btn btn-primary">Product Page</a>
            </div>
        </div>
    <%});%> 
</div>

</main>
</div>
<footer>
    <%# include ../partials/footer %>
</footer>

</body>
</html>

<div></div>

<script>
const autoCompletejs = new autoComplete({
	data: {
		src: async () => {
			// Loading placeholder text
			document
				.querySelector("#autoComplete")
				.setAttribute("placeholder", "Loading...");
			// Fetch External Data Source
			const data = await postData(`/productsApi/productsNames`, {
				<%if(storeId){%>
            		storeId: "<%=storeId%>",
				<%}%>
				keywords: document.querySelector("[name=keywords]").value,
				category: document.querySelector("[name=category]").value
			})
			
			if(data.status<0)
				$("#new-admin-error").text(data.err);

			const productsNames = data.productsNames
			

			//const {productsNames} = await source.json();
			// Post loading placeholder text
			document
				.querySelector("#autoComplete")
				.setAttribute("placeholder", "Product Name");
            // Returns Fetched data
            console.log(productsNames);
			return productsNames;
		},
		cache: false
	},
	sort: (a, b) => {
		if (a.match < b.match) return -1;
		if (a.match > b.match) return 1;
		return 0;
	},
	placeHolder: "Product Name",
	selector: "#autoComplete",
	threshold: 0,
	debounce: 0,
	searchEngine: "strict",
	highlight: true,
	maxResults: 10,
	resultsList: {
		render: true,
		container: source => {
      source.setAttribute("id", "autoComplete_results_list");
		},
		destination: document.querySelector("#autoComplete"),
		position: "afterend",
		element: "ul"
	},
	resultItem: {
		content: (data, source) => {
      source.innerHTML = data.match;
		},
		element: "li"
	},
	noResults: () => {
		const result = document.createElement("li");
		result.setAttribute("class", "no_result");
		result.setAttribute("tabindex", "1");
		result.innerHTML = "No Results";
		document.querySelector("#autoComplete_results_list").appendChild(result);
	},
	onSelection: feedback => {
		const selection = feedback.selection.value;
		// Render selected choice to selection div
		//document.querySelector(".selection").innerHTML = selection;
		// Clear Input
		document.querySelector("#autoComplete").value = selection;
		// Change placeholder with the selected value
		document
			.querySelector("#autoComplete")
			.setAttribute("placeholder", selection);
		// Concole log autoComplete data feedback
	}
});

// On page load add class to input field
window.addEventListener("load", () => {
	document.querySelector("#autoComplete").classList.add("out");
	document.querySelector("#autoComplete_results_list").style.display = "none";
});


// Toggle event for search input
// showing & hidding results list onfocus / blur
// ["focus", "blur"].forEach(eventType => {
["focus", "blur", "mousedown", "keydown"].forEach(eventType => {
	const input = document.querySelector("#autoComplete");
	const resultsList = document.querySelector("#autoComplete_results_list");

	document.querySelector("#autoComplete").addEventListener(eventType, event => {
		// Hide results list & show other elemennts
		if (eventType === "blur") {
			//action("dim");
		} else if (eventType === "focus") {
			// Show results list & hide other elemennts
			//action("light");
		}
	});

	// Hide Results list when not used
	document.addEventListener(eventType, event => {
		var current = event.target;
		if (
			current === input ||
			current === resultsList ||
			input.contains(current) ||
			resultsList.contains(current)
		) {
			resultsList.style.display = "block";
		} else {
			resultsList.style.display = "none";
		}
	});
});

// Toggle Input Classes on results list focus to keep style
["focusin", "focusout", "keydown"].forEach(eventType => {
	document
		.querySelector("#autoComplete_results_list")
		.addEventListener(eventType, event => {
			if (eventType === "focusin") {
				if (event.target && event.target.nodeName === "LI") {
					//action("light");
					document.querySelector("#autoComplete").classList.remove("out");
					document.querySelector("#autoComplete").classList.add("in");
				}
			} else if (eventType === "focusout" || event.keyCode === 13) {
				//action("dim");
				document.querySelector("#autoComplete").classList.remove("in");
				document.querySelector("#autoComplete").classList.add("out");
			}
		});
});

// autoComplete.js on type event emitter
document.querySelector("#autoComplete").addEventListener("type", event => {
	console.log(event);
});

</script>